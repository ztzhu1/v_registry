/**
 * @fileoverview gRPC-Web generated client stub for protoblog
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v4.25.6
// source: v_registry_server.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.protoblog = require('./v_registry_server_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.protoblog.VRegistryServerClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.protoblog.VRegistryServerPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.protoblog.RegistryRequest,
 *   !proto.protoblog.StringListReply>}
 */
const methodDescriptor_VRegistryServer_GetDbNames = new grpc.web.MethodDescriptor(
  '/protoblog.VRegistryServer/GetDbNames',
  grpc.web.MethodType.UNARY,
  proto.protoblog.RegistryRequest,
  proto.protoblog.StringListReply,
  /**
   * @param {!proto.protoblog.RegistryRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.protoblog.StringListReply.deserializeBinary
);


/**
 * @param {!proto.protoblog.RegistryRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.protoblog.StringListReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.protoblog.StringListReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.protoblog.VRegistryServerClient.prototype.getDbNames =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/protoblog.VRegistryServer/GetDbNames',
      request,
      metadata || {},
      methodDescriptor_VRegistryServer_GetDbNames,
      callback);
};


/**
 * @param {!proto.protoblog.RegistryRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.protoblog.StringListReply>}
 *     Promise that resolves to the response
 */
proto.protoblog.VRegistryServerPromiseClient.prototype.getDbNames =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/protoblog.VRegistryServer/GetDbNames',
      request,
      metadata || {},
      methodDescriptor_VRegistryServer_GetDbNames);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.protoblog.RegistryRequest,
 *   !proto.protoblog.StringListReply>}
 */
const methodDescriptor_VRegistryServer_GetCollNames = new grpc.web.MethodDescriptor(
  '/protoblog.VRegistryServer/GetCollNames',
  grpc.web.MethodType.UNARY,
  proto.protoblog.RegistryRequest,
  proto.protoblog.StringListReply,
  /**
   * @param {!proto.protoblog.RegistryRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.protoblog.StringListReply.deserializeBinary
);


/**
 * @param {!proto.protoblog.RegistryRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.protoblog.StringListReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.protoblog.StringListReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.protoblog.VRegistryServerClient.prototype.getCollNames =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/protoblog.VRegistryServer/GetCollNames',
      request,
      metadata || {},
      methodDescriptor_VRegistryServer_GetCollNames,
      callback);
};


/**
 * @param {!proto.protoblog.RegistryRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.protoblog.StringListReply>}
 *     Promise that resolves to the response
 */
proto.protoblog.VRegistryServerPromiseClient.prototype.getCollNames =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/protoblog.VRegistryServer/GetCollNames',
      request,
      metadata || {},
      methodDescriptor_VRegistryServer_GetCollNames);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.protoblog.RegistryRequest,
 *   !proto.protoblog.LsReply>}
 */
const methodDescriptor_VRegistryServer_Ls = new grpc.web.MethodDescriptor(
  '/protoblog.VRegistryServer/Ls',
  grpc.web.MethodType.UNARY,
  proto.protoblog.RegistryRequest,
  proto.protoblog.LsReply,
  /**
   * @param {!proto.protoblog.RegistryRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.protoblog.LsReply.deserializeBinary
);


/**
 * @param {!proto.protoblog.RegistryRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.protoblog.LsReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.protoblog.LsReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.protoblog.VRegistryServerClient.prototype.ls =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/protoblog.VRegistryServer/Ls',
      request,
      metadata || {},
      methodDescriptor_VRegistryServer_Ls,
      callback);
};


/**
 * @param {!proto.protoblog.RegistryRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.protoblog.LsReply>}
 *     Promise that resolves to the response
 */
proto.protoblog.VRegistryServerPromiseClient.prototype.ls =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/protoblog.VRegistryServer/Ls',
      request,
      metadata || {},
      methodDescriptor_VRegistryServer_Ls);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.protoblog.SaveKeyRequest,
 *   !proto.protoblog.StringReply>}
 */
const methodDescriptor_VRegistryServer_SaveKey = new grpc.web.MethodDescriptor(
  '/protoblog.VRegistryServer/SaveKey',
  grpc.web.MethodType.UNARY,
  proto.protoblog.SaveKeyRequest,
  proto.protoblog.StringReply,
  /**
   * @param {!proto.protoblog.SaveKeyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.protoblog.StringReply.deserializeBinary
);


/**
 * @param {!proto.protoblog.SaveKeyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.protoblog.StringReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.protoblog.StringReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.protoblog.VRegistryServerClient.prototype.saveKey =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/protoblog.VRegistryServer/SaveKey',
      request,
      metadata || {},
      methodDescriptor_VRegistryServer_SaveKey,
      callback);
};


/**
 * @param {!proto.protoblog.SaveKeyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.protoblog.StringReply>}
 *     Promise that resolves to the response
 */
proto.protoblog.VRegistryServerPromiseClient.prototype.saveKey =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/protoblog.VRegistryServer/SaveKey',
      request,
      metadata || {},
      methodDescriptor_VRegistryServer_SaveKey);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.protoblog.CopyKeyRequest,
 *   !proto.protoblog.StringReply>}
 */
const methodDescriptor_VRegistryServer_CopyKey = new grpc.web.MethodDescriptor(
  '/protoblog.VRegistryServer/CopyKey',
  grpc.web.MethodType.UNARY,
  proto.protoblog.CopyKeyRequest,
  proto.protoblog.StringReply,
  /**
   * @param {!proto.protoblog.CopyKeyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.protoblog.StringReply.deserializeBinary
);


/**
 * @param {!proto.protoblog.CopyKeyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.protoblog.StringReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.protoblog.StringReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.protoblog.VRegistryServerClient.prototype.copyKey =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/protoblog.VRegistryServer/CopyKey',
      request,
      metadata || {},
      methodDescriptor_VRegistryServer_CopyKey,
      callback);
};


/**
 * @param {!proto.protoblog.CopyKeyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.protoblog.StringReply>}
 *     Promise that resolves to the response
 */
proto.protoblog.VRegistryServerPromiseClient.prototype.copyKey =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/protoblog.VRegistryServer/CopyKey',
      request,
      metadata || {},
      methodDescriptor_VRegistryServer_CopyKey);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.protoblog.DeleteKeyRequest,
 *   !proto.protoblog.StringReply>}
 */
const methodDescriptor_VRegistryServer_DeleteKey = new grpc.web.MethodDescriptor(
  '/protoblog.VRegistryServer/DeleteKey',
  grpc.web.MethodType.UNARY,
  proto.protoblog.DeleteKeyRequest,
  proto.protoblog.StringReply,
  /**
   * @param {!proto.protoblog.DeleteKeyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.protoblog.StringReply.deserializeBinary
);


/**
 * @param {!proto.protoblog.DeleteKeyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.protoblog.StringReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.protoblog.StringReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.protoblog.VRegistryServerClient.prototype.deleteKey =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/protoblog.VRegistryServer/DeleteKey',
      request,
      metadata || {},
      methodDescriptor_VRegistryServer_DeleteKey,
      callback);
};


/**
 * @param {!proto.protoblog.DeleteKeyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.protoblog.StringReply>}
 *     Promise that resolves to the response
 */
proto.protoblog.VRegistryServerPromiseClient.prototype.deleteKey =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/protoblog.VRegistryServer/DeleteKey',
      request,
      metadata || {},
      methodDescriptor_VRegistryServer_DeleteKey);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.protoblog.DirRequest,
 *   !proto.protoblog.StringReply>}
 */
const methodDescriptor_VRegistryServer_DeleteDir = new grpc.web.MethodDescriptor(
  '/protoblog.VRegistryServer/DeleteDir',
  grpc.web.MethodType.UNARY,
  proto.protoblog.DirRequest,
  proto.protoblog.StringReply,
  /**
   * @param {!proto.protoblog.DirRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.protoblog.StringReply.deserializeBinary
);


/**
 * @param {!proto.protoblog.DirRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.protoblog.StringReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.protoblog.StringReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.protoblog.VRegistryServerClient.prototype.deleteDir =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/protoblog.VRegistryServer/DeleteDir',
      request,
      metadata || {},
      methodDescriptor_VRegistryServer_DeleteDir,
      callback);
};


/**
 * @param {!proto.protoblog.DirRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.protoblog.StringReply>}
 *     Promise that resolves to the response
 */
proto.protoblog.VRegistryServerPromiseClient.prototype.deleteDir =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/protoblog.VRegistryServer/DeleteDir',
      request,
      metadata || {},
      methodDescriptor_VRegistryServer_DeleteDir);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.protoblog.DirRequest,
 *   !proto.protoblog.StringReply>}
 */
const methodDescriptor_VRegistryServer_NewDir = new grpc.web.MethodDescriptor(
  '/protoblog.VRegistryServer/NewDir',
  grpc.web.MethodType.UNARY,
  proto.protoblog.DirRequest,
  proto.protoblog.StringReply,
  /**
   * @param {!proto.protoblog.DirRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.protoblog.StringReply.deserializeBinary
);


/**
 * @param {!proto.protoblog.DirRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.protoblog.StringReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.protoblog.StringReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.protoblog.VRegistryServerClient.prototype.newDir =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/protoblog.VRegistryServer/NewDir',
      request,
      metadata || {},
      methodDescriptor_VRegistryServer_NewDir,
      callback);
};


/**
 * @param {!proto.protoblog.DirRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.protoblog.StringReply>}
 *     Promise that resolves to the response
 */
proto.protoblog.VRegistryServerPromiseClient.prototype.newDir =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/protoblog.VRegistryServer/NewDir',
      request,
      metadata || {},
      methodDescriptor_VRegistryServer_NewDir);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.protoblog.CopyDirRequest,
 *   !proto.protoblog.StringReply>}
 */
const methodDescriptor_VRegistryServer_CopyDir = new grpc.web.MethodDescriptor(
  '/protoblog.VRegistryServer/CopyDir',
  grpc.web.MethodType.UNARY,
  proto.protoblog.CopyDirRequest,
  proto.protoblog.StringReply,
  /**
   * @param {!proto.protoblog.CopyDirRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.protoblog.StringReply.deserializeBinary
);


/**
 * @param {!proto.protoblog.CopyDirRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.protoblog.StringReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.protoblog.StringReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.protoblog.VRegistryServerClient.prototype.copyDir =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/protoblog.VRegistryServer/CopyDir',
      request,
      metadata || {},
      methodDescriptor_VRegistryServer_CopyDir,
      callback);
};


/**
 * @param {!proto.protoblog.CopyDirRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.protoblog.StringReply>}
 *     Promise that resolves to the response
 */
proto.protoblog.VRegistryServerPromiseClient.prototype.copyDir =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/protoblog.VRegistryServer/CopyDir',
      request,
      metadata || {},
      methodDescriptor_VRegistryServer_CopyDir);
};


module.exports = proto.protoblog;

